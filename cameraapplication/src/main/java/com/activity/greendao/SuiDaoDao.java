package com.activity.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "SUI_DAO".
*/
public class SuiDaoDao extends AbstractDao<SuiDao, Long> {

    public static final String TABLENAME = "SUI_DAO";

    /**
     * Properties of entity SuiDao.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Ip = new Property(1, String.class, "ip", false, "IP");
        public final static Property Port = new Property(2, String.class, "port", false, "PORT");
        public final static Property Type = new Property(3, String.class, "type", false, "TYPE");
        public final static Property Link = new Property(4, String.class, "link", false, "LINK");
        public final static Property Name = new Property(5, String.class, "name", false, "NAME");
        public final static Property User = new Property(6, String.class, "user", false, "USER");
        public final static Property Time = new Property(7, String.class, "time", false, "TIME");
    }


    public SuiDaoDao(DaoConfig config) {
        super(config);
    }
    
    public SuiDaoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"SUI_DAO\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"IP\" TEXT," + // 1: ip
                "\"PORT\" TEXT," + // 2: port
                "\"TYPE\" TEXT," + // 3: type
                "\"LINK\" TEXT," + // 4: link
                "\"NAME\" TEXT," + // 5: name
                "\"USER\" TEXT," + // 6: user
                "\"TIME\" TEXT);"); // 7: time
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"SUI_DAO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, SuiDao entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String ip = entity.getIp();
        if (ip != null) {
            stmt.bindString(2, ip);
        }
 
        String port = entity.getPort();
        if (port != null) {
            stmt.bindString(3, port);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
 
        String link = entity.getLink();
        if (link != null) {
            stmt.bindString(5, link);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String user = entity.getUser();
        if (user != null) {
            stmt.bindString(7, user);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(8, time);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, SuiDao entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String ip = entity.getIp();
        if (ip != null) {
            stmt.bindString(2, ip);
        }
 
        String port = entity.getPort();
        if (port != null) {
            stmt.bindString(3, port);
        }
 
        String type = entity.getType();
        if (type != null) {
            stmt.bindString(4, type);
        }
 
        String link = entity.getLink();
        if (link != null) {
            stmt.bindString(5, link);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(6, name);
        }
 
        String user = entity.getUser();
        if (user != null) {
            stmt.bindString(7, user);
        }
 
        String time = entity.getTime();
        if (time != null) {
            stmt.bindString(8, time);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public SuiDao readEntity(Cursor cursor, int offset) {
        SuiDao entity = new SuiDao( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // ip
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // port
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // type
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // link
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5), // name
            cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6), // user
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7) // time
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, SuiDao entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setIp(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setPort(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setLink(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setName(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
        entity.setUser(cursor.isNull(offset + 6) ? null : cursor.getString(offset + 6));
        entity.setTime(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(SuiDao entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(SuiDao entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(SuiDao entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
